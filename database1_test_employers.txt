
CREATE TABLE department(
	id INT PRIMARY KEY, /*Unique identifier for the each row*/
	name VARCHAR(50) NOT NULL /*Mandatory field of the table*/
);

CREATE TABLE company(
	id INT PRIMARY KEY,
	name VARCHAR(100) NOT NULL,
	revenue INT
);

CREATE TABLE employee(
	
	id INT PRIMARY KEY,
	name VARCHAR(100) NOT NULL,
	city VARCHAR(100) NOT NULL,
	department_id INT NOT NULL,
	salary INT NOT NULL,
	FOREIGN KEY (department_id) REFERENCES department(id)
	/*connect any employerto to a particular department
	a column exixt in both tables
	we use only use primary keys as foreign keys
	the foreign key must reference unique column
	
	A constraint violation occurs when the foreign key references
	a row that does not exist or has been deleted. In this case,
	the default action taken by PostgreSQL is to not delete or
	update the row and generate an error. This is known as a 
	"restrict" action. The purpose of this action is to prevent 
	data integrity issues by ensuring that foreign key constraints 
	are not violated.
	*/	
);

INSERT INTO department
VALUES
(1, 'IT'),
(2, 'Management'),
(3, 'IT'),
(4, 'Support');

SELECT * FROM department;


INSERT INTO company
VALUES
(1, 'IBM', 2000000),
(2, 'GOOGLE', 9000000),
(3, 'Apple', 10000000);

INSERT INTO employee
VALUES
(1, 'David', 'London', 3, 80000),
(2, 'Emily', 'London', 3, 70000),
(3, 'Peter', 'Paris', 3, 60000),
(4, 'Ava', 'Paris', 3, 50000),
(5, 'Penny', 'London', 2, 110000),
(6, 'Jim', 'London', 2, 90000),
(7, 'Amy', 'Rome', 4, 30000),
(8, 'Cloe', 'London', 3, 110000);

SELECT * FROM department

/*Modify the table using UPDATE*/
UPDATE department
SET name = 'Management'
WHERE id = 1;

SELECT * FROM employee;

/*Delete a row using DELETE*/
DELETE FROM employee
WHERE salary > 100000;

/*Display specific columns*/
SELECT name FROM company;
SELECT id from company;
SELECT name, revenue  FROM company;

/*Display Specific rows*/
SELECT * FROM company
WHERE revenue < 5000000;

SELECT * FROM company
WHERE NOT revenue >= 5000000;

SELECT * FROM employee
WHERE salary BETWEEN 50000 AND 70000;

SELECT * FROM employee
WHERE salary = 80000;

SELECT * FROM employee
WHERE salary <> 80000; /*Different to*/

/*Rows order by - limit*/
SELECT * FROM employee
ORDER BY salary
LIMIT 5;


/*Nested Query: Obtain the name of the employees that have 
salary greater than 70000 and works in IT*/
SELECT name FROM employee
WHERE salary > 70000
AND department_id IN (
	SELECT id FROM department
	WHERE name = 'IT')


/*LIKE statement*/
/*SELECT all the employees who their cyity starts with L*/
SELECT * FROM employee
WHERE city LIKE 'L%' OR city LIKE '%s'

/*Display only the unique entries in the table*/
SELECT DISTINCT name FROM department;

SELECT * FROM department;
SELECT * FROM employee;
/*Connect Two Tables*/
SELECT emp.name , dep.id, dep.name
FROM employee emp, department dep
WHERE emp.department_id = dep.id
ORDER BY emp.name, dep.id;


/*JOINS connect 2 tables
INNER JOIN -> BOTH TABLES
LEFT JOIN -> LEFT TABLE + BOTH TABLES
RIGHT JOIN -> RIGHT TABLE + BOTH TABLES
FULL JOIN -> RIGHT + LEFT
*/

SELECT * FROM company;

SELECT * FROM department;
SELECT * FROM employee;	/*Department ID in in both tables*/


SELECT emp.name, dep.id, dep.name
FROM employee emp
JOIN department dep
ON dep.id = emp.department_id
ORDER BY emp.name, dep.id;


SELECT e1, name FROM employee e1
EXCEPT 
SELECT e2, name FROM employee e2
WHERE e2.salary >= 80000;

SELECT name FROM employee
EXCEPT
SELECT name FROM employee
WHERE salary >= 80000;

/*Special Query*/
SELECT name AS Nombre_empleado FROM employee

SELECT * FROM employee
WHERE department_id IN(
	SELECT department_id FROM employee
	WHERE name LIKE 'Peter')
AND name NOT LIKE 'Peter';




















